
ATMEGA2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000449  00800200  00800200  0000046c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000049c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001671  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ec3  00000000  00000000  00001bed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007f2  00000000  00000000  00002ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  000032a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000909  00000000  00000000  000033c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000407  00000000  00000000  00003cd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000040d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	95 c1       	rjmp	.+810    	; 0x390 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	26 e0       	ldi	r18, 0x06	; 6
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a9 34       	cpi	r26, 0x49	; 73
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>

00000104 <__do_copy_data>:
 104:	12 e0       	ldi	r17, 0x02	; 2
 106:	a0 e0       	ldi	r26, 0x00	; 0
 108:	b2 e0       	ldi	r27, 0x02	; 2
 10a:	e8 ef       	ldi	r30, 0xF8	; 248
 10c:	f3 e0       	ldi	r31, 0x03	; 3
 10e:	00 e0       	ldi	r16, 0x00	; 0
 110:	0b bf       	out	0x3b, r16	; 59
 112:	02 c0       	rjmp	.+4      	; 0x118 <__do_copy_data+0x14>
 114:	07 90       	elpm	r0, Z+
 116:	0d 92       	st	X+, r0
 118:	a0 30       	cpi	r26, 0x00	; 0
 11a:	b1 07       	cpc	r27, r17
 11c:	d9 f7       	brne	.-10     	; 0x114 <__do_copy_data+0x10>
 11e:	6e d0       	rcall	.+220    	; 0x1fc <main>
 120:	69 c1       	rjmp	.+722    	; 0x3f4 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <Twi_start>:
		goto twi_quit;    
		r_val=1;
		twi_quit:
		twi_status=twi_tran(twi_stop); 
		return r_val;
}
 124:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
 128:	8c e0       	ldi	r24, 0x0C	; 12
 12a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
 12e:	08 95       	ret

00000130 <twi_tran>:
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	41 f0       	breq	.+16     	; 0x144 <twi_tran+0x14>
 134:	18 f0       	brcs	.+6      	; 0x13c <twi_tran+0xc>
 136:	82 30       	cpi	r24, 0x02	; 2
 138:	49 f0       	breq	.+18     	; 0x14c <twi_tran+0x1c>
 13a:	0d c0       	rjmp	.+26     	; 0x156 <twi_tran+0x26>
 13c:	84 ea       	ldi	r24, 0xA4	; 164
 13e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 142:	09 c0       	rjmp	.+18     	; 0x156 <twi_tran+0x26>
 144:	84 e8       	ldi	r24, 0x84	; 132
 146:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 14a:	05 c0       	rjmp	.+10     	; 0x156 <twi_tran+0x26>
 14c:	84 e9       	ldi	r24, 0x94	; 148
 14e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	08 95       	ret
 156:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 15a:	88 23       	and	r24, r24
 15c:	e4 f7       	brge	.-8      	; 0x156 <twi_tran+0x26>
 15e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
 162:	88 7f       	andi	r24, 0xF8	; 248
 164:	08 95       	ret

00000166 <twi_receive_data>:

uint8_t twi_receive_data(uint8_t twi_address)
{
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	d8 2f       	mov	r29, r24
	unsigned char n = 0;
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	01 c0       	rjmp	.+2      	; 0x172 <twi_receive_data+0xc>
 170:	8c 2f       	mov	r24, r28
	unsigned char twi_status;
	char r_val = -1;
	uint8_t set;
	twi_retry:
	if(n++>=MAX_TRIES)
 172:	c1 e0       	ldi	r28, 0x01	; 1
 174:	c8 0f       	add	r28, r24
 176:	82 33       	cpi	r24, 0x32	; 50
 178:	10 f5       	brcc	.+68     	; 0x1be <twi_receive_data+0x58>
	return r_val;
	twi_status=twi_tran(twi_start);
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	d9 df       	rcall	.-78     	; 0x130 <twi_tran>
	if(twi_status==TWI_ARB_LOST)
 17e:	88 33       	cpi	r24, 0x38	; 56
 180:	b9 f3       	breq	.-18     	; 0x170 <twi_receive_data+0xa>
	{
		goto twi_retry;
	}
	if((twi_status!=TWI_START)&&(twi_status!=TWI_REP_START))
 182:	88 30       	cpi	r24, 0x08	; 8
 184:	11 f0       	breq	.+4      	; 0x18a <twi_receive_data+0x24>
 186:	80 31       	cpi	r24, 0x10	; 16
 188:	91 f4       	brne	.+36     	; 0x1ae <twi_receive_data+0x48>
	{
		goto twi_quit;
	}
	TWDR = twi_address;
 18a:	d0 93 bb 00 	sts	0x00BB, r29	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
	twi_status=twi_tran(twi_data);
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	cf df       	rcall	.-98     	; 0x130 <twi_tran>
	if ((twi_status == TWI_SLA_NACK) || (twi_status == TWI_ARB_LOST))
 192:	80 32       	cpi	r24, 0x20	; 32
 194:	69 f3       	breq	.-38     	; 0x170 <twi_receive_data+0xa>
 196:	88 33       	cpi	r24, 0x38	; 56
 198:	59 f3       	breq	.-42     	; 0x170 <twi_receive_data+0xa>
	goto twi_retry;
	if (twi_status != TWI_SLA_ACK)
 19a:	88 31       	cpi	r24, 0x18	; 24
 19c:	51 f4       	brne	.+20     	; 0x1b2 <twi_receive_data+0x4c>
	goto twi_quit;
	set = TWDR;
 19e:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
	read_data = set;
 1a2:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <__DATA_REGION_ORIGIN__>
	if (twi_status != TWI_DATA_ACK)
 1a6:	88 32       	cpi	r24, 0x28	; 40
 1a8:	31 f0       	breq	.+12     	; 0x1b6 <twi_receive_data+0x50>

uint8_t twi_receive_data(uint8_t twi_address)
{
	unsigned char n = 0;
	unsigned char twi_status;
	char r_val = -1;
 1aa:	cf ef       	ldi	r28, 0xFF	; 255
 1ac:	05 c0       	rjmp	.+10     	; 0x1b8 <twi_receive_data+0x52>
 1ae:	cf ef       	ldi	r28, 0xFF	; 255
 1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <twi_receive_data+0x52>
 1b2:	cf ef       	ldi	r28, 0xFF	; 255
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <twi_receive_data+0x52>
	read_data = set;
	if (twi_status != TWI_DATA_ACK)
	goto twi_quit;
	r_val=1;
	twi_quit:
	twi_status=twi_tran(twi_stop);
 1b6:	c1 e0       	ldi	r28, 0x01	; 1
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	ba df       	rcall	.-140    	; 0x130 <twi_tran>
	return r_val;
 1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <twi_receive_data+0x5a>
	unsigned char twi_status;
	char r_val = -1;
	uint8_t set;
	twi_retry:
	if(n++>=MAX_TRIES)
	return r_val;
 1be:	cf ef       	ldi	r28, 0xFF	; 255
	goto twi_quit;
	r_val=1;
	twi_quit:
	twi_status=twi_tran(twi_stop);
	return r_val;
}
 1c0:	8c 2f       	mov	r24, r28
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <int_to_str>:

char *int_to_str(uint8_t num, uint8_t len){
	uint8_t i;
	char *str;
	str[len]='\0';
 1c8:	e6 2f       	mov	r30, r22
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	10 82       	st	Z, r1
	for(i=(len-1); i>=0; i--){
 1ce:	3f ef       	ldi	r19, 0xFF	; 255
 1d0:	36 0f       	add	r19, r22
		str[i] = '0' + num % 10;
 1d2:	e3 2f       	mov	r30, r19
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	9d ec       	ldi	r25, 0xCD	; 205
 1d8:	89 9f       	mul	r24, r25
 1da:	91 2d       	mov	r25, r1
 1dc:	11 24       	eor	r1, r1
 1de:	96 95       	lsr	r25
 1e0:	96 95       	lsr	r25
 1e2:	96 95       	lsr	r25
 1e4:	49 2f       	mov	r20, r25
 1e6:	44 0f       	add	r20, r20
 1e8:	24 2f       	mov	r18, r20
 1ea:	22 0f       	add	r18, r18
 1ec:	22 0f       	add	r18, r18
 1ee:	24 0f       	add	r18, r20
 1f0:	82 1b       	sub	r24, r18
 1f2:	80 5d       	subi	r24, 0xD0	; 208
 1f4:	80 83       	st	Z, r24
		num/=10;
 1f6:	89 2f       	mov	r24, r25

char *int_to_str(uint8_t num, uint8_t len){
	uint8_t i;
	char *str;
	str[len]='\0';
	for(i=(len-1); i>=0; i--){
 1f8:	31 50       	subi	r19, 0x01	; 1
 1fa:	eb cf       	rjmp	.-42     	; 0x1d2 <int_to_str+0xa>

000001fc <main>:
#include <avr/interrupt.h>
#include "I2C.h"
#include "Usart.h"
int main() 
{
	Twi_start();
 1fc:	93 df       	rcall	.-218    	; 0x124 <Twi_start>
	char a=0;
	Usart0.baudrate = 9600;
 1fe:	e7 e3       	ldi	r30, 0x37	; 55
 200:	f5 e0       	ldi	r31, 0x05	; 5
 202:	80 e8       	ldi	r24, 0x80	; 128
 204:	95 e2       	ldi	r25, 0x25	; 37
 206:	92 87       	std	Z+10, r25	; 0x0a
 208:	81 87       	std	Z+9, r24	; 0x09
	Usart0.Fosc = 16000000;
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	94 e2       	ldi	r25, 0x24	; 36
 20e:	a4 ef       	ldi	r26, 0xF4	; 244
 210:	b0 e0       	ldi	r27, 0x00	; 0
 212:	83 87       	std	Z+11, r24	; 0x0b
 214:	94 87       	std	Z+12, r25	; 0x0c
 216:	a5 87       	std	Z+13, r26	; 0x0d
 218:	b6 87       	std	Z+14, r27	; 0x0e
	Usart0.operatingMode = Normal;
 21a:	15 82       	std	Z+5, r1	; 0x05
	Usart0.usartMode = Asynchronous;
 21c:	10 82       	st	Z, r1
	Usart0.parityMode = Disabled;
 21e:	11 82       	std	Z+1, r1	; 0x01
	Usart0.stopBitSelect = bit_1;
 220:	12 82       	std	Z+2, r1	; 0x02
	Usart0.characterSize = eight_bit;
 222:	83 e0       	ldi	r24, 0x03	; 3
 224:	83 83       	std	Z+3, r24	; 0x03
	Usart0.clockPolarity = MODE0;
 226:	14 82       	std	Z+4, r1	; 0x04
	Usart0.rdata = 'A';
 228:	81 e4       	ldi	r24, 0x41	; 65
 22a:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <Usart0+0x111>
	Usar0tInit();
 22e:	10 d0       	rcall	.+32     	; 0x250 <Usar0tInit>
	read_data = 0;
 230:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
	while(1)
{	
		twi_receive_data(0b10000011);
 234:	83 e8       	ldi	r24, 0x83	; 131
 236:	97 df       	rcall	.-210    	; 0x166 <twi_receive_data>
		a=int_to_str(read_data,2);
 238:	62 e0       	ldi	r22, 0x02	; 2
 23a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
		usart0_sendchar(a);
 23e:	c4 df       	rcall	.-120    	; 0x1c8 <int_to_str>
 240:	99 d0       	rcall	.+306    	; 0x374 <usart0_sendchar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 242:	8f e9       	ldi	r24, 0x9F	; 159
 244:	9f e0       	ldi	r25, 0x0F	; 15
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <main+0x4a>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <main+0x50>
 24c:	00 00       	nop
 24e:	f2 cf       	rjmp	.-28     	; 0x234 <main+0x38>

00000250 <Usar0tInit>:
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	c7 e3       	ldi	r28, 0x37	; 55
 256:	d5 e0       	ldi	r29, 0x05	; 5
 258:	6b 85       	ldd	r22, Y+11	; 0x0b
 25a:	7c 85       	ldd	r23, Y+12	; 0x0c
 25c:	8d 85       	ldd	r24, Y+13	; 0x0d
 25e:	9e 85       	ldd	r25, Y+14	; 0x0e
 260:	29 85       	ldd	r18, Y+9	; 0x09
 262:	3a 85       	ldd	r19, Y+10	; 0x0a
 264:	40 e0       	ldi	r20, 0x00	; 0
 266:	50 e0       	ldi	r21, 0x00	; 0
 268:	a3 d0       	rcall	.+326    	; 0x3b0 <__udivmodsi4>
 26a:	da 01       	movw	r26, r20
 26c:	c9 01       	movw	r24, r18
 26e:	68 94       	set
 270:	13 f8       	bld	r1, 3
 272:	b6 95       	lsr	r27
 274:	a7 95       	ror	r26
 276:	97 95       	ror	r25
 278:	87 95       	ror	r24
 27a:	16 94       	lsr	r1
 27c:	d1 f7       	brne	.-12     	; 0x272 <Usar0tInit+0x22>
 27e:	9c 01       	movw	r18, r24
 280:	21 50       	subi	r18, 0x01	; 1
 282:	31 09       	sbc	r19, r1
 284:	38 87       	std	Y+8, r19	; 0x08
 286:	2f 83       	std	Y+7, r18	; 0x07
 288:	e0 ec       	ldi	r30, 0xC0	; 192
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	10 82       	st	Z, r1
 28e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 292:	a2 ec       	ldi	r26, 0xC2	; 194
 294:	b0 e0       	ldi	r27, 0x00	; 0
 296:	1c 92       	st	X, r1
 298:	9c 91       	ld	r25, X
 29a:	88 81       	ld	r24, Y
 29c:	82 95       	swap	r24
 29e:	88 0f       	add	r24, r24
 2a0:	88 0f       	add	r24, r24
 2a2:	80 7c       	andi	r24, 0xC0	; 192
 2a4:	89 2b       	or	r24, r25
 2a6:	8c 93       	st	X, r24
 2a8:	20 81       	ld	r18, Z
 2aa:	9d 81       	ldd	r25, Y+5	; 0x05
 2ac:	89 2f       	mov	r24, r25
 2ae:	81 70       	andi	r24, 0x01	; 1
 2b0:	88 0f       	add	r24, r24
 2b2:	82 2b       	or	r24, r18
 2b4:	80 83       	st	Z, r24
 2b6:	92 30       	cpi	r25, 0x02	; 2
 2b8:	e0 f5       	brcc	.+120    	; 0x332 <Usar0tInit+0xe2>
 2ba:	6b 85       	ldd	r22, Y+11	; 0x0b
 2bc:	7c 85       	ldd	r23, Y+12	; 0x0c
 2be:	8d 85       	ldd	r24, Y+13	; 0x0d
 2c0:	9e 85       	ldd	r25, Y+14	; 0x0e
 2c2:	29 85       	ldd	r18, Y+9	; 0x09
 2c4:	3a 85       	ldd	r19, Y+10	; 0x0a
 2c6:	40 e0       	ldi	r20, 0x00	; 0
 2c8:	50 e0       	ldi	r21, 0x00	; 0
 2ca:	72 d0       	rcall	.+228    	; 0x3b0 <__udivmodsi4>
 2cc:	da 01       	movw	r26, r20
 2ce:	c9 01       	movw	r24, r18
 2d0:	68 94       	set
 2d2:	13 f8       	bld	r1, 3
 2d4:	b6 95       	lsr	r27
 2d6:	a7 95       	ror	r26
 2d8:	97 95       	ror	r25
 2da:	87 95       	ror	r24
 2dc:	16 94       	lsr	r1
 2de:	d1 f7       	brne	.-12     	; 0x2d4 <Usar0tInit+0x84>
 2e0:	9c 01       	movw	r18, r24
 2e2:	21 50       	subi	r18, 0x01	; 1
 2e4:	31 09       	sbc	r19, r1
 2e6:	38 87       	std	Y+8, r19	; 0x08
 2e8:	2f 83       	std	Y+7, r18	; 0x07
 2ea:	a1 ec       	ldi	r26, 0xC1	; 193
 2ec:	b0 e0       	ldi	r27, 0x00	; 0
 2ee:	8c 91       	ld	r24, X
 2f0:	88 69       	ori	r24, 0x98	; 152
 2f2:	8c 93       	st	X, r24
 2f4:	e2 ec       	ldi	r30, 0xC2	; 194
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	20 81       	ld	r18, Z
 2fa:	9b 81       	ldd	r25, Y+3	; 0x03
 2fc:	89 2f       	mov	r24, r25
 2fe:	83 70       	andi	r24, 0x03	; 3
 300:	88 0f       	add	r24, r24
 302:	82 2b       	or	r24, r18
 304:	80 83       	st	Z, r24
 306:	8c 91       	ld	r24, X
 308:	94 70       	andi	r25, 0x04	; 4
 30a:	98 2b       	or	r25, r24
 30c:	9c 93       	st	X, r25
 30e:	90 81       	ld	r25, Z
 310:	8a 81       	ldd	r24, Y+2	; 0x02
 312:	88 0f       	add	r24, r24
 314:	88 0f       	add	r24, r24
 316:	88 0f       	add	r24, r24
 318:	89 2b       	or	r24, r25
 31a:	80 83       	st	Z, r24
 31c:	90 81       	ld	r25, Z
 31e:	89 81       	ldd	r24, Y+1	; 0x01
 320:	82 95       	swap	r24
 322:	80 7f       	andi	r24, 0xF0	; 240
 324:	89 2b       	or	r24, r25
 326:	80 83       	st	Z, r24
 328:	90 81       	ld	r25, Z
 32a:	8c 81       	ldd	r24, Y+4	; 0x04
 32c:	89 2b       	or	r24, r25
 32e:	80 83       	st	Z, r24
 330:	13 c0       	rjmp	.+38     	; 0x358 <Usar0tInit+0x108>
 332:	91 11       	cpse	r25, r1
 334:	11 c0       	rjmp	.+34     	; 0x358 <Usar0tInit+0x108>
 336:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 33a:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 33e:	8d b1       	in	r24, 0x0d	; 13
 340:	84 60       	ori	r24, 0x04	; 4
 342:	8d b9       	out	0x0d, r24	; 13
 344:	e2 ec       	ldi	r30, 0xC2	; 194
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	90 81       	ld	r25, Z
 34a:	80 91 3d 05 	lds	r24, 0x053D	; 0x80053d <Usart0+0x6>
 34e:	89 2b       	or	r24, r25
 350:	80 83       	st	Z, r24
 352:	88 e1       	ldi	r24, 0x18	; 24
 354:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 358:	e7 e3       	ldi	r30, 0x37	; 55
 35a:	f5 e0       	ldi	r31, 0x05	; 5
 35c:	87 81       	ldd	r24, Z+7	; 0x07
 35e:	90 85       	ldd	r25, Z+8	; 0x08
 360:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 364:	87 81       	ldd	r24, Z+7	; 0x07
 366:	90 85       	ldd	r25, Z+8	; 0x08
 368:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 36c:	78 94       	sei
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	08 95       	ret

00000374 <usart0_sendchar>:
 374:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 378:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 37c:	86 ff       	sbrs	r24, 6
 37e:	fc cf       	rjmp	.-8      	; 0x378 <usart0_sendchar+0x4>
 380:	8a e0       	ldi	r24, 0x0A	; 10
 382:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 386:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 38a:	86 ff       	sbrs	r24, 6
 38c:	fc cf       	rjmp	.-8      	; 0x386 <usart0_sendchar+0x12>
 38e:	08 95       	ret

00000390 <__vector_25>:
 390:	1f 92       	push	r1
 392:	0f 92       	push	r0
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	0f 92       	push	r0
 398:	11 24       	eor	r1, r1
 39a:	8f 93       	push	r24
 39c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 3a0:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <Usart0+0x111>
 3a4:	8f 91       	pop	r24
 3a6:	0f 90       	pop	r0
 3a8:	0f be       	out	0x3f, r0	; 63
 3aa:	0f 90       	pop	r0
 3ac:	1f 90       	pop	r1
 3ae:	18 95       	reti

000003b0 <__udivmodsi4>:
 3b0:	a1 e2       	ldi	r26, 0x21	; 33
 3b2:	1a 2e       	mov	r1, r26
 3b4:	aa 1b       	sub	r26, r26
 3b6:	bb 1b       	sub	r27, r27
 3b8:	fd 01       	movw	r30, r26
 3ba:	0d c0       	rjmp	.+26     	; 0x3d6 <__udivmodsi4_ep>

000003bc <__udivmodsi4_loop>:
 3bc:	aa 1f       	adc	r26, r26
 3be:	bb 1f       	adc	r27, r27
 3c0:	ee 1f       	adc	r30, r30
 3c2:	ff 1f       	adc	r31, r31
 3c4:	a2 17       	cp	r26, r18
 3c6:	b3 07       	cpc	r27, r19
 3c8:	e4 07       	cpc	r30, r20
 3ca:	f5 07       	cpc	r31, r21
 3cc:	20 f0       	brcs	.+8      	; 0x3d6 <__udivmodsi4_ep>
 3ce:	a2 1b       	sub	r26, r18
 3d0:	b3 0b       	sbc	r27, r19
 3d2:	e4 0b       	sbc	r30, r20
 3d4:	f5 0b       	sbc	r31, r21

000003d6 <__udivmodsi4_ep>:
 3d6:	66 1f       	adc	r22, r22
 3d8:	77 1f       	adc	r23, r23
 3da:	88 1f       	adc	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	1a 94       	dec	r1
 3e0:	69 f7       	brne	.-38     	; 0x3bc <__udivmodsi4_loop>
 3e2:	60 95       	com	r22
 3e4:	70 95       	com	r23
 3e6:	80 95       	com	r24
 3e8:	90 95       	com	r25
 3ea:	9b 01       	movw	r18, r22
 3ec:	ac 01       	movw	r20, r24
 3ee:	bd 01       	movw	r22, r26
 3f0:	cf 01       	movw	r24, r30
 3f2:	08 95       	ret

000003f4 <_exit>:
 3f4:	f8 94       	cli

000003f6 <__stop_program>:
 3f6:	ff cf       	rjmp	.-2      	; 0x3f6 <__stop_program>
