
ATMEGA2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013f  00800200  00800200  00000418  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000448  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013ac  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d94  00000000  00000000  0000189c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b8  00000000  00000000  00002630  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00002be8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000083a  00000000  00000000  00002cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001db  00000000  00000000  0000350e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000036e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5f c0       	rjmp	.+190    	; 0x124 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	23 e0       	ldi	r18, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	af 33       	cpi	r26, 0x3F	; 63
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>

00000104 <__do_copy_data>:
 104:	12 e0       	ldi	r17, 0x02	; 2
 106:	a0 e0       	ldi	r26, 0x00	; 0
 108:	b2 e0       	ldi	r27, 0x02	; 2
 10a:	e4 ea       	ldi	r30, 0xA4	; 164
 10c:	f3 e0       	ldi	r31, 0x03	; 3
 10e:	00 e0       	ldi	r16, 0x00	; 0
 110:	0b bf       	out	0x3b, r16	; 59
 112:	02 c0       	rjmp	.+4      	; 0x118 <__do_copy_data+0x14>
 114:	07 90       	elpm	r0, Z+
 116:	0d 92       	st	X+, r0
 118:	a0 30       	cpi	r26, 0x00	; 0
 11a:	b1 07       	cpc	r27, r17
 11c:	d9 f7       	brne	.-10     	; 0x114 <__do_copy_data+0x10>
 11e:	49 d0       	rcall	.+146    	; 0x1b2 <main>
 120:	3f c1       	rjmp	.+638    	; 0x3a0 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__vector_25>:
#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
#include "Usart.h"
ISR(USART0_RX_vect) {
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	0b b6       	in	r0, 0x3b	; 59
 130:	0f 92       	push	r0
 132:	2f 93       	push	r18
 134:	3f 93       	push	r19
 136:	4f 93       	push	r20
 138:	5f 93       	push	r21
 13a:	6f 93       	push	r22
 13c:	7f 93       	push	r23
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	af 93       	push	r26
 144:	bf 93       	push	r27
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
	input_buffer[read_spot] = UDR0;
 14a:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <read_spot>
 14e:	f0 91 12 02 	lds	r31, 0x0212	; 0x800212 <read_spot+0x1>
 152:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 156:	ed 5e       	subi	r30, 0xED	; 237
 158:	fd 4f       	sbci	r31, 0xFD	; 253
 15a:	80 83       	st	Z, r24
/*	uint8_t A = (uint8_t)input_buffer[read_spot];*/
	usart0_sendint('A');
 15c:	81 e4       	ldi	r24, 0x41	; 65
 15e:	d1 d0       	rcall	.+418    	; 0x302 <usart0_sendint>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 160:	8f e3       	ldi	r24, 0x3F	; 63
 162:	9c e9       	ldi	r25, 0x9C	; 156
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <__vector_25+0x40>
 168:	00 c0       	rjmp	.+0      	; 0x16a <__vector_25+0x46>
 16a:	00 00       	nop
	_delay_ms(10);
	read_spot++;
 16c:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <read_spot>
 170:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <read_spot+0x1>
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <read_spot+0x1>
 17a:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <read_spot>
	if(read_spot== 255) read_spot = 0;
 17e:	8f 3f       	cpi	r24, 0xFF	; 255
 180:	91 05       	cpc	r25, r1
 182:	21 f4       	brne	.+8      	; 0x18c <__vector_25+0x68>
 184:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <read_spot+0x1>
 188:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <read_spot>
}
 18c:	ff 91       	pop	r31
 18e:	ef 91       	pop	r30
 190:	bf 91       	pop	r27
 192:	af 91       	pop	r26
 194:	9f 91       	pop	r25
 196:	8f 91       	pop	r24
 198:	7f 91       	pop	r23
 19a:	6f 91       	pop	r22
 19c:	5f 91       	pop	r21
 19e:	4f 91       	pop	r20
 1a0:	3f 91       	pop	r19
 1a2:	2f 91       	pop	r18
 1a4:	0f 90       	pop	r0
 1a6:	0b be       	out	0x3b, r0	; 59
 1a8:	0f 90       	pop	r0
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	0f 90       	pop	r0
 1ae:	1f 90       	pop	r1
 1b0:	18 95       	reti

000001b2 <main>:
int main()
{
	Usart0.baudrate = 9600;
 1b2:	e0 e3       	ldi	r30, 0x30	; 48
 1b4:	f3 e0       	ldi	r31, 0x03	; 3
 1b6:	80 e8       	ldi	r24, 0x80	; 128
 1b8:	95 e2       	ldi	r25, 0x25	; 37
 1ba:	92 87       	std	Z+10, r25	; 0x0a
 1bc:	81 87       	std	Z+9, r24	; 0x09
	Usart0.Fosc = 16000000;
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	94 e2       	ldi	r25, 0x24	; 36
 1c2:	a4 ef       	ldi	r26, 0xF4	; 244
 1c4:	b0 e0       	ldi	r27, 0x00	; 0
 1c6:	83 87       	std	Z+11, r24	; 0x0b
 1c8:	94 87       	std	Z+12, r25	; 0x0c
 1ca:	a5 87       	std	Z+13, r26	; 0x0d
 1cc:	b6 87       	std	Z+14, r27	; 0x0e
	Usart0.operatingMode = Normal;
 1ce:	15 82       	std	Z+5, r1	; 0x05
	Usart0.usartMode = Asynchronous;
 1d0:	10 82       	st	Z, r1
	Usart0.parityMode = Disabled;
 1d2:	11 82       	std	Z+1, r1	; 0x01
	Usart0.stopBitSelect = bit_1;
 1d4:	12 82       	std	Z+2, r1	; 0x02
	Usart0.characterSize = eight_bit;
 1d6:	83 e0       	ldi	r24, 0x03	; 3
 1d8:	83 83       	std	Z+3, r24	; 0x03
	Usart0.clockPolarity = MODE0;
 1da:	14 82       	std	Z+4, r1	; 0x04
	Usar0tInit();
 1dc:	02 d0       	rcall	.+4      	; 0x1e2 <Usar0tInit>
	usart0_get();
 1de:	9f d0       	rcall	.+318    	; 0x31e <usart0_get>
 1e0:	ff cf       	rjmp	.-2      	; 0x1e0 <main+0x2e>

000001e2 <Usar0tInit>:
 1e2:	cf 93       	push	r28
        while ((UCSR0A & (1 << UDRE0)) == 0);
        UDR0 = *data; 
        data += 1;
    }
    while ((UCSR0A & (1 << UDRE0)) == 0);
    UDR0 = '\n';
 1e4:	df 93       	push	r29
 1e6:	c0 e3       	ldi	r28, 0x30	; 48
 1e8:	d3 e0       	ldi	r29, 0x03	; 3
 1ea:	6b 85       	ldd	r22, Y+11	; 0x0b
 1ec:	7c 85       	ldd	r23, Y+12	; 0x0c
 1ee:	8d 85       	ldd	r24, Y+13	; 0x0d
 1f0:	9e 85       	ldd	r25, Y+14	; 0x0e
 1f2:	29 85       	ldd	r18, Y+9	; 0x09
 1f4:	3a 85       	ldd	r19, Y+10	; 0x0a
 1f6:	40 e0       	ldi	r20, 0x00	; 0
 1f8:	50 e0       	ldi	r21, 0x00	; 0
 1fa:	b0 d0       	rcall	.+352    	; 0x35c <__udivmodsi4>
 1fc:	da 01       	movw	r26, r20
 1fe:	c9 01       	movw	r24, r18
 200:	68 94       	set
 202:	13 f8       	bld	r1, 3
 204:	b6 95       	lsr	r27
 206:	a7 95       	ror	r26
 208:	97 95       	ror	r25
 20a:	87 95       	ror	r24
 20c:	16 94       	lsr	r1
 20e:	d1 f7       	brne	.-12     	; 0x204 <Usar0tInit+0x22>
 210:	9c 01       	movw	r18, r24
 212:	21 50       	subi	r18, 0x01	; 1
 214:	31 09       	sbc	r19, r1
 216:	38 87       	std	Y+8, r19	; 0x08
 218:	2f 83       	std	Y+7, r18	; 0x07
 21a:	e0 ec       	ldi	r30, 0xC0	; 192
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	10 82       	st	Z, r1
 220:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 224:	a2 ec       	ldi	r26, 0xC2	; 194
 226:	b0 e0       	ldi	r27, 0x00	; 0
 228:	1c 92       	st	X, r1
 22a:	9c 91       	ld	r25, X
 22c:	88 81       	ld	r24, Y
 22e:	82 95       	swap	r24
 230:	88 0f       	add	r24, r24
 232:	88 0f       	add	r24, r24
 234:	80 7c       	andi	r24, 0xC0	; 192
 236:	89 2b       	or	r24, r25
 238:	8c 93       	st	X, r24
 23a:	20 81       	ld	r18, Z
 23c:	9d 81       	ldd	r25, Y+5	; 0x05
 23e:	89 2f       	mov	r24, r25
 240:	81 70       	andi	r24, 0x01	; 1
 242:	88 0f       	add	r24, r24
 244:	82 2b       	or	r24, r18
 246:	80 83       	st	Z, r24
 248:	92 30       	cpi	r25, 0x02	; 2
 24a:	d8 f5       	brcc	.+118    	; 0x2c2 <Usar0tInit+0xe0>
 24c:	6b 85       	ldd	r22, Y+11	; 0x0b
 24e:	7c 85       	ldd	r23, Y+12	; 0x0c
 250:	8d 85       	ldd	r24, Y+13	; 0x0d
 252:	9e 85       	ldd	r25, Y+14	; 0x0e
 254:	29 85       	ldd	r18, Y+9	; 0x09
 256:	3a 85       	ldd	r19, Y+10	; 0x0a
 258:	40 e0       	ldi	r20, 0x00	; 0
 25a:	50 e0       	ldi	r21, 0x00	; 0
 25c:	7f d0       	rcall	.+254    	; 0x35c <__udivmodsi4>
 25e:	da 01       	movw	r26, r20
 260:	c9 01       	movw	r24, r18
 262:	68 94       	set
 264:	13 f8       	bld	r1, 3
 266:	b6 95       	lsr	r27
 268:	a7 95       	ror	r26
 26a:	97 95       	ror	r25
 26c:	87 95       	ror	r24
 26e:	16 94       	lsr	r1
 270:	d1 f7       	brne	.-12     	; 0x266 <Usar0tInit+0x84>
 272:	9c 01       	movw	r18, r24
 274:	21 50       	subi	r18, 0x01	; 1
 276:	31 09       	sbc	r19, r1
 278:	38 87       	std	Y+8, r19	; 0x08
 27a:	2f 83       	std	Y+7, r18	; 0x07
 27c:	a1 ec       	ldi	r26, 0xC1	; 193
 27e:	b0 e0       	ldi	r27, 0x00	; 0
 280:	88 e1       	ldi	r24, 0x18	; 24
 282:	8c 93       	st	X, r24
 284:	e2 ec       	ldi	r30, 0xC2	; 194
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	20 81       	ld	r18, Z
 28a:	9b 81       	ldd	r25, Y+3	; 0x03
 28c:	89 2f       	mov	r24, r25
 28e:	83 70       	andi	r24, 0x03	; 3
 290:	88 0f       	add	r24, r24
 292:	82 2b       	or	r24, r18
 294:	80 83       	st	Z, r24
 296:	8c 91       	ld	r24, X
 298:	94 70       	andi	r25, 0x04	; 4
 29a:	98 2b       	or	r25, r24
 29c:	9c 93       	st	X, r25
 29e:	90 81       	ld	r25, Z
 2a0:	8a 81       	ldd	r24, Y+2	; 0x02
 2a2:	88 0f       	add	r24, r24
 2a4:	88 0f       	add	r24, r24
 2a6:	88 0f       	add	r24, r24
 2a8:	89 2b       	or	r24, r25
 2aa:	80 83       	st	Z, r24
 2ac:	90 81       	ld	r25, Z
 2ae:	89 81       	ldd	r24, Y+1	; 0x01
 2b0:	82 95       	swap	r24
 2b2:	80 7f       	andi	r24, 0xF0	; 240
 2b4:	89 2b       	or	r24, r25
 2b6:	80 83       	st	Z, r24
 2b8:	90 81       	ld	r25, Z
 2ba:	8c 81       	ldd	r24, Y+4	; 0x04
 2bc:	89 2b       	or	r24, r25
 2be:	80 83       	st	Z, r24
 2c0:	13 c0       	rjmp	.+38     	; 0x2e8 <Usar0tInit+0x106>
 2c2:	91 11       	cpse	r25, r1
 2c4:	11 c0       	rjmp	.+34     	; 0x2e8 <Usar0tInit+0x106>
 2c6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 2ca:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 2ce:	8d b1       	in	r24, 0x0d	; 13
 2d0:	84 60       	ori	r24, 0x04	; 4
 2d2:	8d b9       	out	0x0d, r24	; 13
 2d4:	e2 ec       	ldi	r30, 0xC2	; 194
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	90 81       	ld	r25, Z
 2da:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <Usart0+0x6>
 2de:	89 2b       	or	r24, r25
 2e0:	80 83       	st	Z, r24
 2e2:	88 e1       	ldi	r24, 0x18	; 24
 2e4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 2e8:	e0 e3       	ldi	r30, 0x30	; 48
 2ea:	f3 e0       	ldi	r31, 0x03	; 3
 2ec:	87 81       	ldd	r24, Z+7	; 0x07
 2ee:	90 85       	ldd	r25, Z+8	; 0x08
 2f0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 2f4:	87 81       	ldd	r24, Z+7	; 0x07
 2f6:	90 85       	ldd	r25, Z+8	; 0x08
 2f8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <usart0_sendint>:
 302:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 306:	95 ff       	sbrs	r25, 5
 308:	fc cf       	rjmp	.-8      	; 0x302 <usart0_sendint>
 30a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 30e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 312:	85 ff       	sbrs	r24, 5
 314:	fc cf       	rjmp	.-8      	; 0x30e <usart0_sendint+0xc>
 316:	8a e0       	ldi	r24, 0x0A	; 10
 318:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 31c:	08 95       	ret

0000031e <usart0_get>:
}
uint8_t usart0_get(void) {
	cli();
 31e:	f8 94       	cli
	BUFF_LEN=0;
 320:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 324:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
	read_spot=0;
 328:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <read_spot+0x1>
 32c:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <read_spot>
    UCSR0B |= (1<<RXCIE0);
 330:	e1 ec       	ldi	r30, 0xC1	; 193
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 81       	ld	r24, Z
 336:	80 68       	ori	r24, 0x80	; 128
 338:	80 83       	st	Z, r24
    uint8_t b;
    if(read_spot == 0)
 33a:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <read_spot>
 33e:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <read_spot+0x1>
 342:	00 97       	sbiw	r24, 0x00	; 0
 344:	19 f4       	brne	.+6      	; 0x34c <usart0_get+0x2e>
        b = input_buffer[sizeof(input_buffer) - 1];
 346:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <input_buffer+0xfe>
 34a:	04 c0       	rjmp	.+8      	; 0x354 <usart0_get+0x36>
    else
        b = input_buffer[read_spot  - 1];
 34c:	fc 01       	movw	r30, r24
 34e:	ee 5e       	subi	r30, 0xEE	; 238
 350:	fd 4f       	sbci	r31, 0xFD	; 253
 352:	80 81       	ld	r24, Z
    if(b == '\r')
 354:	8d 30       	cpi	r24, 0x0D	; 13
 356:	09 f4       	brne	.+2      	; 0x35a <usart0_get+0x3c>
        b = '\n';
 358:	8a e0       	ldi	r24, 0x0A	; 10
    return b;
	sei();
}
 35a:	08 95       	ret

0000035c <__udivmodsi4>:
 35c:	a1 e2       	ldi	r26, 0x21	; 33
 35e:	1a 2e       	mov	r1, r26
 360:	aa 1b       	sub	r26, r26
 362:	bb 1b       	sub	r27, r27
 364:	fd 01       	movw	r30, r26
 366:	0d c0       	rjmp	.+26     	; 0x382 <__udivmodsi4_ep>

00000368 <__udivmodsi4_loop>:
 368:	aa 1f       	adc	r26, r26
 36a:	bb 1f       	adc	r27, r27
 36c:	ee 1f       	adc	r30, r30
 36e:	ff 1f       	adc	r31, r31
 370:	a2 17       	cp	r26, r18
 372:	b3 07       	cpc	r27, r19
 374:	e4 07       	cpc	r30, r20
 376:	f5 07       	cpc	r31, r21
 378:	20 f0       	brcs	.+8      	; 0x382 <__udivmodsi4_ep>
 37a:	a2 1b       	sub	r26, r18
 37c:	b3 0b       	sbc	r27, r19
 37e:	e4 0b       	sbc	r30, r20
 380:	f5 0b       	sbc	r31, r21

00000382 <__udivmodsi4_ep>:
 382:	66 1f       	adc	r22, r22
 384:	77 1f       	adc	r23, r23
 386:	88 1f       	adc	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	1a 94       	dec	r1
 38c:	69 f7       	brne	.-38     	; 0x368 <__udivmodsi4_loop>
 38e:	60 95       	com	r22
 390:	70 95       	com	r23
 392:	80 95       	com	r24
 394:	90 95       	com	r25
 396:	9b 01       	movw	r18, r22
 398:	ac 01       	movw	r20, r24
 39a:	bd 01       	movw	r22, r26
 39c:	cf 01       	movw	r24, r30
 39e:	08 95       	ret

000003a0 <_exit>:
 3a0:	f8 94       	cli

000003a2 <__stop_program>:
 3a2:	ff cf       	rjmp	.-2      	; 0x3a2 <__stop_program>
